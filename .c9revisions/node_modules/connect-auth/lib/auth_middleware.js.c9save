{"ts":1350572893554,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*!\n * Copyright(c) 2010 Ciaran Jessup <ciaranj@gmai.com>\n * MIT Licensed\n */\n var  connect= require('connect')\n    , Events= require('./events')\n    , RequestMethods= require('./requestMethods')\n    , StrategyExecutor= require('./strategyExecutor')\n    , Tracing= require('./tracing');\n\n/**\n * Construct the authentication middleware.\n * Construction can take 2 forms:\n *    auth(<Strategy>()|[<Strategy>()])  -  A single configured strategy, or array of strategies.\n *    auth({ strategies:<Strategy>()|[<Strategy>()...]\n *           [trace: true|false|function(message, req, [scope])}])   - More powerful variant that allows for passing in other configuration options, none yet defined.\n */\nmodule.exports = function(optionsOrStrategy) {\n\n  var i, strategies, strategyExecutor, options, traceFunction, server;\n\n  if( !optionsOrStrategy ) throw new Error(\"You must specify at least one strategy to use the authentication middleware, even if it is anonymous.\");\n  // Constructor form 1\n  if( Array.isArray(optionsOrStrategy) || ( optionsOrStrategy.authenticate !== undefined && optionsOrStrategy.strategies === undefined  ) ) {\n    strategies= Array.isArray(optionsOrStrategy) ? optionsOrStrategy : [optionsOrStrategy];\n    options= {trace: false};\n  }\n  else {\n    options= optionsOrStrategy\n    strategies= Array.isArray(optionsOrStrategy.strategies) ? optionsOrStrategy.strategies : [optionsOrStrategy.strategies];\n  }\n\n  if( !options.trace ) { // If options.trace is specified as false or undefined we no-op the messages.\n    traceFunction= Tracing.nullTrace;\n  }\n  else if( options.trace === true ) { // If options.trace is really true then we log out to console\n    traceFunction= Tracing.standardTrace;\n  }\n  else { // Custom provided trace function\n    traceFunction= options.trace;\n  }\n\n  var logoutHandler= options.logoutHandler || Events.defaultLogoutHandler;\n  var firstLoginHandler= options.firstLoginHandler || Events.defaultFirstLoginHandler;\n\n  // Construct the strategy executor.\n  strategyExecutor= new StrategyExecutor( strategies )\n\n  // Construct the middleware that adapts the request object to provide authentication primitives.\n\n  var internalApp= connect();\n  internalApp.use( function auth(req, res, next) {\n\n      // Mix-in the static utility methods (the methods are directly on the request, and don't need the response object).\n      req.getAuthDetails=    RequestMethods.getAuthDetails;\n      req.isAuthenticated=   RequestMethods.isAuthenticated;\n      req.isUnAuthenticated= RequestMethods.isUnAuthenticated;\n\n      // If there is a session middleware, use it.\n      if( req.session && req.session.auth ) {\n        req._connect_auth= req.session.auth;\n      }\n      else {\n        // Create the auth holder if needed.\n        if( ! req.getAuthDetails() ) {\n          createAuthDetails(req);\n        }\n      }\n      // Assign a tracer so if needed routes can trace.\n      req.getAuthDetails().trace= function( message, scope, linePrefix ) {\n        traceFunction( message, {scope:scope, request:req, response:res}, linePrefix );\n      };\n\n      // These methods require the request & response to be in their closures.\n      req.authenticate= function(strategy, opts, middlewareCallback) {\n        RequestMethods.authenticate.call( this, strategy, opts, middlewareCallback, strategyExecutor, res, firstLoginHandler );\n      };\n\n      req.logout= function( scope, middlewareCallback ) {\n        if( typeof scope === 'function' && middlewareCallback === undefined ) {\n          middlewareCallback= scope;\n          scope= undefined;\n        }\n        RequestMethods.logout.call( this, {scope:scope, request:req, response:res}, logoutHandler, function() {\n          //Clear out the saved auth details\n          //TODO: this should be scope-aware.\n          createAuthDetails( req );\n          // Assign a tracer so if needed routes can trace.\n          req.getAuthDetails().trace= function( message, scope, linePrefix ) {\n            traceFunction( message, {scope:scope, request:req, response:res}, linePrefix );\n          };\n          \n          if( middlewareCallback) middlewareCallback();\n        })\n      };\n\n      // Now we've added our requisite methods to the request, call the next part of the middleware chain\n      // (which may in fact be a middleware piece that enforces authentication!)\n      next();\n  });\n\n  // Some strategies require routes to be defined, so give them a chance to do so.\n  for(i=0;i< strategies.length; i++ ) {\n    if( strategies[i].setupRoutes ) {\n      strategies[i].setupRoutes(internalApp);\n    }\n  }\n\n  return internalApp;\n};\n\n// Utility functions\nfunction createAuthDetails( request ) {\n   var auth= { scopedUsers: {} };\n   request._connect_auth= auth;\n   if( request.session ) {\n     request.session.auth= auth;\n   }\n };"]],"start1":0,"start2":0,"length1":0,"length2":4790}]],"length":4790}
